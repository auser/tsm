name: Cross-Platform Build with PyOxidizer

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-amd64
            rust_target: x86_64-unknown-linux-gnu
            binary_name: tsm
            asset_name: tsm-linux-amd64
          - os: ubuntu-latest
            target: linux-arm64
            rust_target: aarch64-unknown-linux-gnu
            binary_name: tsm
            asset_name: tsm-linux-arm64
          - os: macos-latest
            target: macos-amd64
            rust_target: x86_64-apple-darwin
            binary_name: tsm
            asset_name: tsm-macos-amd64
          - os: macos-latest
            target: macos-arm64
            rust_target: aarch64-apple-darwin
            binary_name: tsm
            asset_name: tsm-macos-arm64
          - os: windows-latest
            target: windows-amd64
            rust_target: x86_64-pc-windows-msvc
            binary_name: tsm.exe
            asset_name: tsm-windows-amd64.exe

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}
          override: true

      - name: Install PyOxidizer
        run: |
          python -m pip install --upgrade pip
          pip install pyoxidizer

      - name: Build binary
        run: |
          pyoxidizer build --target-triple ${{ matrix.rust_target }}
        env:
          RUST_BACKTRACE: 1

      - name: Find and copy binary
        shell: bash
        run: |
          # Find the built binary and copy it
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            find build -name "${{ matrix.binary_name }}" -type f -exec cp {} ./${{ matrix.asset_name }} \;
          else
            find build -name "${{ matrix.binary_name }}" -type f -executable -exec cp {} ./${{ matrix.asset_name }} \;
          fi

          # Verify the binary exists
          ls -la ${{ matrix.asset_name }}

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
