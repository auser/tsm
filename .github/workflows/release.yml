name: Cross-Platform Build with PyInstaller

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-amd64
            binary_name: tsm
            asset_name: tsm-linux-amd64
            use_docker: false
          - os: ubuntu-latest
            target: linux-arm64
            binary_name: tsm
            asset_name: tsm-linux-arm64
            use_docker: true
            docker_platform: linux/arm64
          - os: macos-latest
            target: macos-amd64
            binary_name: tsm
            asset_name: tsm-macos-amd64
            use_docker: false
          - os: macos-latest
            target: macos-arm64
            binary_name: tsm
            asset_name: tsm-macos-arm64
            use_docker: false
          - os: windows-latest
            target: windows-amd64
            binary_name: tsm.exe
            asset_name: tsm-windows-amd64.exe
            use_docker: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        if: ${{ !matrix.use_docker }}
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Build binary (Native)
        if: ${{ !matrix.use_docker }}
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            pyinstaller --onefile --clean --noconsole -n tsm main.py
          else
            pyinstaller --onefile --clean -n tsm main.py
          fi

      - name: Set up Docker Buildx
        if: ${{ matrix.use_docker }}
        uses: docker/setup-buildx-action@v3

      - name: Build binary (Docker)
        if: ${{ matrix.use_docker }}
        run: |
          # Create a temporary Dockerfile for building
          cat > Dockerfile << 'EOF'
          FROM python:3.11-slim

          WORKDIR /build

          # Copy the entire repository
          COPY . .

          # Debug: List all files and directories
          RUN echo "=== Directory Structure ===" && \
              find . -type f -o -type d | sort && \
              echo "=== Contents of main.py ===" && \
              cat main.py && \
              echo "=== End of main.py ==="

          # Install system dependencies required for PyInstaller
          RUN apt-get update && \
              apt-get install -y --no-install-recommends \
              binutils \
              build-essential \
              && rm -rf /var/lib/apt/lists/*

          # Install Python dependencies
          RUN pip install --upgrade pip && \
              pip install pyinstaller && \
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

          # Build the binary
          RUN pyinstaller --onefile --clean -n tsm main.py

          # The output will be in /build/dist/tsm
          EOF

          # Build using Docker Buildx with proper context
          docker buildx build \
            --platform ${{ matrix.docker_platform }} \
            --output type=local,dest=./dist \
            --build-context . \
            -f Dockerfile .

      - name: Copy and verify binary
        shell: bash
        run: |
          # Copy the built binary
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp dist/${{ matrix.binary_name }} ./${{ matrix.asset_name }}
          else
            cp dist/${{ matrix.binary_name }} ./${{ matrix.asset_name }}
          fi

          # Verify the binary exists and show its architecture
          ls -la ${{ matrix.asset_name }}
          if [[ "${{ matrix.target }}" != *"windows"* ]]; then
            file ${{ matrix.asset_name }}
          fi

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
