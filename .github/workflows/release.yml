name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      build_binaries:
        description: "Build standalone binaries"
        required: false
        default: true
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Install dependencies
        run: |
          uv sync
          uv add pyinstaller build --dev

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update version in files
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          sed -i "s/\"TSM\", \".*\"/\"TSM\", \"$VERSION\"/" src/tsm/cli.py

      - name: Build distribution files
        run: |
          uv run python -m build

      - name: Build binaries
        if: ${{ github.event.inputs.build_binaries != 'false' }}
        run: |
          uv run pyinstaller --onefile --name tsm main.py
          uv run pyinstaller spec/tsm-linux.spec
          uv run pyinstaller spec/tsm.exe.spec
          uv run pyinstaller spec/tsm-macos.spec

      - name: List artifacts
        run: |
          echo "Distribution files:"
          ls -la dist/
          echo ""
          echo "Binary files:"
          find dist/ -name "tsm*" -type f

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## What's Changed

            $(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD | grep -v "Bump version" | head -20)

            ## Installation

            ### Using pip
            ```bash
            pip install tsm
            ```

            ### Using uv
            ```bash
            uv add tsm
            ```

            ### Standalone Binary
            Download the appropriate binary for your platform:
            - **Linux**: `tsm-linux`
            - **Windows**: `tsm.exe`
            - **macOS**: `tsm-macos`

            Make it executable and run:
            ```bash
            chmod +x tsm-linux
            ./tsm-linux --help
            ```

            ## Usage

            ```bash
            # Basic usage
            tsm generate

            # With custom config
            tsm generate -c docker-compose.yml -o ./config
            ```

            ## Full Changelog

            $(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD)
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/tsm
            dist/tsm-linux
            dist/tsm.exe
            dist/tsm-macos
          draft: false
          prerelease: false
