name: TSM CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CACHE_VERSION: v1
  PYTHON_VERSION: "3.10"

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Debug workspace
        run: |
          pwd
          ls -la
          echo "Current directory: $(pwd)"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Workspace contents:"
          ls -la $GITHUB_WORKSPACE || true

      - name: Generate initial lock file
        run: |
          # Install project in editable mode
          uv pip install --system --project $GITHUB_WORKSPACE -e .

          # Install dev dependencies
          uv pip install --system --project $GITHUB_WORKSPACE black ruff mypy

          # Generate lock file
          uv pip freeze --project $GITHUB_WORKSPACE > uv.lock

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ env.CACHE_VERSION }}-uv-lint-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-uv-lint-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          # Install project in editable mode
          uv pip install --system --project . -e .

          # Install dev dependencies
          uv pip install --system --project . black ruff mypy

      - name: Check code formatting with Black
        run: |
          uv run black --check --diff src/ tests/

      - name: Lint with Ruff
        run: |
          uv run ruff check src/ tests/

      - name: Type check with MyPy
        run: |
          uv run mypy src/

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: lint-and-format

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv
          source .venv/bin/activate

      - name: Generate initial lock file
        working-directory: ${{ github.workspace }}
        run: |
          # Install project in editable mode
          uv pip install --system --project $GITHUB_WORKSPACE -e .

          # Install dev dependencies
          uv pip install --system --project $GITHUB_WORKSPACE pytest pytest-cov

          # Generate lock file
          uv pip freeze > uv.lock

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ env.CACHE_VERSION }}-uv-test-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-uv-test-${{ runner.os }}-python${{ matrix.python-version }}-

      - name: Install dependencies
        working-directory: ${{ github.workspace }}
        run: |
          # Install project in editable mode
          uv pip install --system --project $GITHUB_WORKSPACE -e .

          # Install dev dependencies
          uv pip install --system --project $GITHUB_WORKSPACE pytest

      - name: Display environment info
        run: |
          uv --version
          uv run python --version
          uv run python -c "import sys; print(f'Python executable: {sys.executable}')"
          uv tree

      - name: Run tests with coverage
        run: |
          uv run pytest --cov=src/tsm --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          # Install project in editable mode
          uv pip install --system --project $GITHUB_WORKSPACE -e .

          # Install dev dependencies
          uv pip install --system --project $GITHUB_WORKSPACE pytest

          # Generate lock file
          uv pip freeze > uv.lock

      - name: Start Docker daemon
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Run integration tests
        run: |
          # Run integration tests if they exist
          if [ -d "tests/integration" ]; then
            uv run pytest tests/integration/ -v --tb=short
          else
            echo "No integration tests found, skipping..."
          fi

      - name: Test TSM CLI
        run: |
          # Test that the CLI can be invoked
          uv run tsm --help
          uv run python -m tsm.cli --version || echo "Version command not implemented yet"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ${{ github.workspace }}
        run: |
          # Install project in editable mode
          uv pip install --system --project $GITHUB_WORKSPACE -e .

          # Install dev dependencies
          uv pip install --system --project $GITHUB_WORKSPACE safety bandit

          # Generate lock file
          uv pip freeze > uv.lock

      - name: Run safety check for vulnerabilities
        run: |
          uv run safety check --json --output safety-report.json || true

      - name: Run bandit security linter
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30
        if: always()

  build:
    name: Build Standalone Binary
    runs-on: ${{ matrix.os }}
    needs: [test, security-scan]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv
          source .venv/bin/activate

      - name: Generate initial lock file
        working-directory: ${{ github.workspace }}
        run: |
          # Install project in editable mode
          uv pip install --system --project $GITHUB_WORKSPACE -e .

          # Install dev dependencies
          uv pip install --system --project $GITHUB_WORKSPACE pyinstaller

          # Generate lock file
          uv pip freeze > uv.lock

      - name: Build binary with PyInstaller
        run: |
          # Build the binary
          pyinstaller --onefile --name tsm src/tsm/cli.py

          # List the dist directory
          ls -la dist/

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: tsm-binary-${{ matrix.os }}
          path: dist/tsm*
          retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/tsm
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/tsm-binary-ubuntu-latest/tsm
            artifacts/tsm-binary-macos-latest/tsm
            artifacts/tsm-binary-windows-latest/tsm.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/tsm
    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: tsm-package-${{ github.sha }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # Uncomment and configure trusted publishing at https://pypi.org/manage/account/publishing/
        # or use API token with:
        # with:
        #   password: ${{ secrets.PYPI_API_TOKEN }}
