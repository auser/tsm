[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tsm"
version = "1.0.1"
description = "Traefik Service Manager - Auto-scaling and service discovery for Docker microservices"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "admin@herringbank.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
keywords = [
    "traefik",
    "docker",
    "microservices",
    "auto-scaling",
    "service-discovery",
]
requires-python = ">=3.10"
dependencies = [
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "docker>=7.0.0",
    "requests>=2.31.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",
    "watchdog>=3.0.0",
    "jinja2>=3.1.0",
    "prometheus-client>=0.19.0",
    "dotenv>=0.9.9",
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pyinstaller>=6.14.1",
    "build>=1.0.0",
    "pip>=25.1.1",
]

[project.urls]
Homepage = "https://github.com/yourusername/tsm"
Repository = "https://github.com/yourusername/tsm"
Documentation = "https://github.com/yourusername/tsm#readme"
"Bug Tracker" = "https://github.com/yourusername/tsm/issues"

[project.scripts]
tsm = "tsm.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/tsm"]
include = ["src/tsm/**/*.py", "templates/**/*", "README.md", "LICENSE"]

[tool.hatch.build.targets.sdist]
include = [
    "src/tsm/**/*.py",
    "templates/**/*",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["docker.*", "prometheus_client.*", "watchdog.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=src/tsm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=20",
]

[tool.coverage.run]
source = ["src/tsm"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
