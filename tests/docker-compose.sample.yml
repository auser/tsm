x-defaults:
  logging: &default_logging
    driver: "local"
    options:
      max-size: "10m"
      max-file: "30"

  environment: &default_tz
    TZ: "America/Chicago"

services:
  ### Utility Container for testing connections, etc. Contains the "test" script. ###
  utility:
    container_name: alpine-utils
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/alpine-utils:latest
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    volumes:
      - ./etc/scripts:/scripts
    command: sleep infinity
    networks:
      inter_app:
        aliases:
          - alpine-utils
      rabbitmq:
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.utility-router.middlewares=secure-headers
        - traefik.http.routers.utility-router.rule=Host(`utility.ddev`) || Host(`utility.herringbank.com`)

        ################################
        # MongoDB
        ################################
  mongo:
    image: mongo:8.0.1
    container_name: mongo
    restart: always
    ports:
      - 2717:27017
    expose:
      - 27017:27017
    env_file:
      - ./services/mongo-entrypoint/.env.production
    environment:
      <<: *default_tz
      ### FLAG!! ###
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - mongo-data:/data/db
      - ./services/mongo-entrypoint/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.mongo-router.middlewares=secure-headers
        - traefik.http.routers.mongo-router.rule=Host(`mongo.ddev`) || Host(`mongo.herringbank.com`)
        - traefik.http.services.mongo-service.loadbalancer.server.port=27017
        - traefik.http.services.mongo-service.loadbalancer.server.scheme=tcp
    networks:
      mongo:
        aliases:
          - mongo
      inter_app:
        aliases:
          - mongo

  ################################
  # RABBITMQ
  ################################
  rabbitmq:
    container_name: rabbitmq
    ### FLAG!! ### we need to define the image tag
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/dbq-rabbitmq:latest
    restart: always
    volumes:
      - rabbitdata:/var/lib/rabbitmq
      - ./services/rabbitmq/scripts/entrypoint.sh:/app/entrypoint.sh
      - ./services/rabbitmq/scripts/startup.sh:/app/startup.sh
    ### PORT MAPPING
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      <<: *default_tz
    entrypoint: [ "/bin/bash", "/app/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      rabbitmq:

        ################################
        # REDIS
        ################################
  redis:
    container_name: redis
    ### FLAG!! ### we need to define the image tag
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/redis:latest
    restart: always
    healthcheck:
      test: "[ $$(redis-cli ping) = 'PONG' ]" # -a $REDIS_PASSWORD
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    environment:
      <<: *default_tz
    ports:
      - 6370:6379
    networks:
      redis:
        aliases:
          - redis

  ### These are listed in boot order ###

  ################################
  # EMAIL HANDLER
  ################################
  emailhandler:
    container_name: email
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/emailhandler:2.0
    restart: unless-stopped
    ports:
      - 9110:9110
    volumes:
      - ./services/emailhandler/attachments:/app/attachments # new attachments location
      - ./services/emailhandler/attachments:/opt/dev/email-handler/attachments # old attachments location
      - ./services/emailhandler/config:/app/config
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/email-handler-5.0.0.jar --spring.config.location=/app/config/application.yml"
    healthcheck:
      test: 'curl -s http://email:9110/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - email
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.email-router.middlewares=secure-headers
        - traefik.http.routers.email-router.rule=Host(`email.ddev`) || Host(`email.herringbank.com`)
        - traefik.http.services.email-service.loadbalancer.server.port=9110
        - traefik.http.services.email-service.loadbalancer.server.scheme=http

      ################################
      # TUMS (NEW)
      ################################
  tumsnew:
    container_name: tumsnew
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/tums-new:1.0
    restart: unless-stopped
    volumes:
      - ./services/tums-new/config:/app/config
    ports:
      - 9170:9170
      - 9171:9171
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/tums-system-rest-service-3.0.2-SNAPSHOT.jar --spring.cloud.bootstrap.enabled=false --spring.profiles.active=development --spring.config.location=/app/config/application.yml"
    healthcheck:
      test: 'curl -s ''http://tumsnew:9171/actuator/health'' -H ''Authorization: Basic Q3VzdG9tZXIgTWFuYWdlbWVudDozNkRFMTNERC04MzgyLTQ0MjEtOTEzQi1BRERBNTg3QTc5REM='' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - tumsnew
      rabbitmq:
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.tumsnew-router.middlewares=secure-headers
        # - traefik.http.routers.tumsnew-router.rule=Host(`tumsnew.ddev`) || Host(`tumsnew.herringbank.com`)
        - traefik.http.services.tumsnew-service.loadbalancer.server.port=9170
        - traefik.http.services.tumsnew-service.loadbalancer.server.address=civpldocker03
        - traefik.http.services.tumsnew-service.loadbalancer.server.scheme=http

      ################################
      # NOTIFICATION SERVICE
      ################################
  notif:
    container_name: notif
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/notification:1.0
    restart: unless-stopped
    volumes:
      - ./services/notification/config:/app/config
    ports:
      - 9102:9102
      - 9103:9103
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/notification-service-1.0.12.jar server /app/config/application.yml"
    healthcheck:
      test: "curl -s -H 'Authorization: Basic Tm90aWZpY2F0aW9uIFNlcnZpY2U6MmExYWMzMjYtMGI0Ni0xMWUzLWI2MTktMDAxNWM1ZWZhZjI1' 'http://notif:9103/healthcheck' | grep -o 'OK' | wc -l | grep -q '^2$'"
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - notif
      rabbitmq:

        ################################
        # PARTNER MANAGEMENT SERVICE
        ################################
  pms:
    container_name: pms
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/partner-management:1.0
    restart: unless-stopped
    volumes:
      - ./services/partner-management-system/config:/app/config
    ports:
      - 9096:9096
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    # command: sleep infinity
    command: /bin/sh -c "java -jar /app/partner-mgmt-service-2.0.0.jar server /app/config/application.yml"
    healthcheck:
      test: "curl -s http://pms:9096/api-partner-mgmt/v1/application/1202 -H 'Authorization: Basic RlAgVG9vbHM6MmJiMmM0MTQtODUzZS0xMWUzLWIzNTUtMDAxNWM1ZWZhZjI1' | grep -q 'ACH Payment Gateway'"
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - pms
      rabbitmq:

        ################################
        # CUSTOMER MANAGEMENT SYSTEM
        ################################
  customerms:
    container_name: customerms
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/customer-management-system:1.0
    restart: unless-stopped
    volumes:
      - ./services/customer-management-system/config:/app/config
    ports:
      - 9130:9130
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -DLOG_DIR="logs" -jar /app/customer-management-system-service-3.0.13-SNAPSHOT.jar --spring.config.location=/app/config/application.yml"
    healthcheck:
      test: 'curl -s -H ''Authorization: Basic Q3VzdG9tZXIgTWFuYWdlbWVudDozNkRFMTNERC04MzgyLTQ0MjEtOTEzQi1BRERBNTg3QTc5REM='' ''http://customerms:9130/api-cms/actuator/health'' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - customerms
      rabbitmq:
    depends_on:

      ################################
      # REALTIME SERVICE
      ################################
  realtime:
    container_name: realtime
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/realtime:1.0
    restart: unless-stopped
    volumes:
      - ./services/realtime-service/config:/app/config
    ports:
      - 9100:9100
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    # command: /bin/sh -c "java -jar /app/realtime-service-1.0.8.jar server /app/config/application.yml"
    healthcheck:
      test: curl http://realtime:9100/admin/healthcheck | grep -o 'OK' | wc -l | grep -q '^2$'
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - realtime
      rabbitmq:
    depends_on:
      pms:
        condition: service_healthy

  ################################
  # COMPLIANCE SERVICE
  ################################
  compliance:
    container_name: compliance
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/compliance:1.0
    restart: unless-stopped
    volumes:
      - ./services/compliance/config:/app/config
      - ./services/compliance/config/application.yml:/app/application.yml
    ports:
      - 9094:9094
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: java -jar /app/compliance-service-1.0.2.jar server ./config/application.yml
    healthcheck:
      test: "curl -H 'Authorization: Basic Q29tcGxpYW5jZSBTZXJ2aWNlOjBkYzBjMjc2LTBjMTctMTFlMy1iNjE5LTAwMTVjNWVmYWYyNQ==' http://compliance:9094/admin/healthcheck | grep -o 'OK' | wc -l | grep -q '^2$'"
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - compliance
      rabbitmq:
    depends_on:
      pms:
        condition: service_healthy
      ofac:
        condition: service_healthy

  ################################
  # FP ACCOUNTING SERVICE
  ################################
  fpa:
    container_name: fpa
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/fp-accounting:1.0
    restart: unless-stopped
    volumes:
      - ./services/fp-accounting/config:/app/config
    ports:
      - 9092:9092
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java --add-opens java.base/java.lang=ALL-UNNAMED -jar /app/fp-accounting-service-1.0.33.jar server /app/config/application.yml"
    healthcheck:
      test: "curl -H 'Authorization: Basic QWNjb3VudGluZyBTZXJ2aWNlOmFmOTBiMDZhLTFkNDktMTFlMi1iY2U1LTAwMTVjNWVmYWYyNQ==' http://fpa:9092/admin/healthcheck | grep -o 'OK' | wc -l | grep -q '^1$'" # this one only has one 'OK'
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - fpa
      rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      pms:
        condition: service_healthy
      realtime:
        condition: service_healthy

  ################################
  # GATOR SERVICE
  ################################
  gator:
    container_name: gator
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/gator:1.0
    restart: unless-stopped
    volumes:
      - ./services/gator/config:/app/config
    ports:
      - 9190:9190
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    # command: /bin/sh -c "java -Ddeployment.security.SSLv2Hello=false -Ddeployment.security.SSLv3=false -Ddeployment.security.TLSv1=false -Ddeployment.security.TLSv1.1=true -Ddeployment.security.TLSv1.2=true -jar /app/gator-service-3.1.18.jar server /app/config/application.yml"
    healthcheck:
      test: 'curl -s -H ''Authorization: Basic R2F0b3IgU2VydmljZToyYTE4ZmU2MC0wYjQ2LTExZTMtYjYxOS0wMDE1YzVlZmFmMjU='' http://gator:9190/admin/healthcheck | grep -q ''"Payments Database Health Check":{"healthy":true}'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      rabbitmq:
      inter_app:
        aliases:
          - gator
    depends_on:
      rabbitmq:
        condition: service_healthy
      fpa:
        condition: service_healthy
      pms:
        condition: service_healthy
      customerms:
        condition: service_healthy

  ################################
  # GATOR SETTLEMENT SERVICE
  ################################
  gatorst:
    container_name: gatorst
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/gator-settlement:1.0
    restart: unless-stopped
    # relies on some props files located in /opt/properties
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/gator-settlement/config:/app/config
      - ./services/gator-settlement/tmp:/app/tmp
      - ./services/gator-settlement/scripts:/app/scripts
      - ./services/gator-settlement/php:/app/php
      - ./services/gator-settlement/chkfile:/app/chkfile
    ports:
      - 9106:9106
      - 9107:9107
    logging:
      <<: *default_logging
    # command: /bin/sh -c "java -Ddeployment.security.SSLv2Hello=false -Ddeployment.security.SSLv3=false -Ddeployment.security.TLSv1=false -Ddeployment.security.TLSv1.1=true -Ddeployment.security.TLSv1.2=true -Xms256m -Xmx256m -XX:-UseGCOverheadLimit -jar /app/gator-settlement-application-3.2.3.jar --debug"
    healthcheck:
      test: 'curl -s -H ''Authorization: Basic R2F0b3IgU2VydmljZToyYTE4ZmU2MC0wYjQ2LTExZTMtYjYxOS0wMDE1YzVlZmFmMjU='' http://localhost:9107/gator-settlement/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    # gator settlement requires a lot of env vars unfortunately
    environment:
      <<: *default_tz
    networks:
      inter_app:
        aliases:
          - gatorst
      rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      pms:
        condition: service_healthy
      fpa:
        condition: service_healthy
      gator:
        condition: service_healthy

  ################################
  # ACCOUNT MANAGEMENT SERVICE
  ################################
  ams:
    container_name: ams
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/account-management-system-rest:1.0
    restart: unless-stopped
    # relies on some props files located in /opt/properties
    volumes:
      - ./etc/properties:/opt/properties
      - ./etc/properties:/properties # TODO: not sure which props location is being used, need to test this deployment
      - ./services/account-management-system/config:/app/config
    ports:
      - 9120:9120
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/account-management-system-rest-service-3.1.2.jar --spring.config.location=/app/config/application.yml"
    healthcheck:
      test: 'curl -s ''http://ams:9120/api-ams/actuator/health'' -H ''Authorization: Basic QWNjb3VudCBNYW5hZ2VtZW50IFNlcnZpY2U6MzMzQTA1NTEtMDk0MC00QjY2LUI1MzktMDM2MzBENzRDMzcy'' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - ams
      rabbitmq:
    depends_on:
      customerms:
        condition: service_healthy
      pms:
        condition: service_healthy
      realtime:
        condition: service_healthy

  ################################
  # BACKUP BALANCE MANAGER
  ################################
  bbm:
    container_name: bbm
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/backup-balance-manager:1.0
    restart: unless-stopped # not sure if this needs to be running all the time; still don't know much about bbm yet...
    volumes:
      - ./services/backup-balance-manager/config:/app/config
      - ./services/backup-balance-manager/etc:/app/etc
    ports:
      - 9104:9104
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    # command: sleep infinity
    # command: /bin/sh -c "java -jar /app/backup-balance-manager-2.4.1.jar --spring.config.location=/app/config/application.yml"
    # doesn't seem to be launching any rest endpoints
    healthcheck:
      test: 'curl -s http://bbm:9104/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - bbm
      rabbitmq:
    depends_on:

      ################################
      # CARD MANAGEMENT SYSTEM
      ################################
  cardms:
    container_name: cardms
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/card-management-system-rest:1.0
    restart: unless-stopped
    volumes:
      - ./services/card-management-system/config:/app/config
      - ./etc/properties:/app/meta
    ports:
      - 9160:9160
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/card-management-system-rest-service-3.1.7.jar --spring.config.location=/app/config/application.yml --debug"
    healthcheck:
      test: 'curl -s -H ''Authorization: Basic Q2FyZCBNYW5hZ2VtZW50OjQwRjlCQkVDLTM5MUUtNEU0NS1BN0MwLUU4RjE3NjM1QTcwMQ=='' http://cardms:9160/api-cms/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - cardms
      rabbitmq:
    depends_on:
      pms:
        condition: service_healthy
      ams:
        condition: service_healthy
      customerms:
        condition: service_healthy

  ################################
  # PREMIER PAY SERVICE
  ################################
  pps:
    container_name: pps
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/premier-pay:1.0
    restart: unless-stopped
    volumes:
      - ./services/premier-pay-service/config:/app/config
      - ./services/premier-pay-service/premier-pay:/app/premier-pay
      - ./services/premier-pay-service/premier-pay/payrollFiles:/app/premier-pay/payrollFiles
    ports:
      - 9098:9098
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/premier-pay-service-4.2.1.jar server /app/config/application.yml"
    healthcheck:
      test: "curl -s -H 'Authorization: Basic UHJlbWllciBQYXk6MmExOThiNmUtMGI0Ni0xMWUzLWI2MTktMDAxNWM1ZWZhZjI2' http://pps:9098/admin/healthcheck | grep -o 'healthy' | wc -l | grep -q '^3$'" # has 3: deadlocks, lexx-database, premier-database
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - pps
      rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      pms:
        condition: service_healthy
      gator:
        condition: service_healthy
      fpa:
        condition: service_healthy
      compliance:
        condition: service_healthy
      notif:
        condition: service_healthy
      customerms:
        condition: service_healthy

  ################################
  # PREMIER PAY TOOLS
  ################################
  premier-pay-tools:
    container_name: premier-pay-tools
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/premier-pay-tools:dev-v1.9.2
    restart: unless-stopped
    volumes:
      - ./services/premier-pay-tools/config:/app/config
      - ./services/premier-pay-service/premier-pay/payrollFiles:/app/public/uploads
      - ./services/payment-gem-config:/app/payment_gem_config # Mounting the payment-gem config
    ports:
      - 3002:3000
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /app/bin/rails server -b 0.0.0.0 -e production
    healthcheck:
      test: curl -sSo /dev/null http://localhost:3002
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - premier-pay-tools
      redis:
        aliases:
          - redis
    depends_on:
      pps:
        condition: service_healthy
      pms:
        condition: service_healthy
      customerms:
        condition: service_healthy
      gator:
        condition: service_healthy
      redis:
        condition: service_healthy
      tumsnew:
        condition: service_healthy
      cardissapi:
        condition: service_healthy

  ################################
  # TUPAY
  ################################
  tupay:
    container_name: tupay
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/tupay:dev-v1.24
    user: "0:0"
    restart: unless-stopped
    volumes:
      - ./services/tupay/config:/app/config
      - ./services/tupay/doc_archive:/app/doc_archive:rw
    ports:
      - 3004:3004
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
      ALLOWED_HOSTS: civpldocker03.herringbank.com,collegegreen.net,.collegegreen.net
    command: sleep infinity
    # command: /app/bin/rails server -b 0.0.0.0 -e production
    # env_file:
    # - ./services/tupay/.env
    # - ./services/tupay/.env.production
    healthcheck:
      test: curl -sSo /dev/null http://localhost:3004
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - tupay
      redis:
      mongo:
      rabbitmq:
    depends_on:
      redis:
        condition: service_healthy
      tumsnew:
        condition: service_healthy
      gator:
        condition: service_healthy
      pms:
        condition: service_healthy
      ams:
        condition: service_healthy
      erpis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      ibs:
        condition: service_healthy

  ################################
  # ERP INTEGRATION SERVICE
  ################################
  erpis:
    container_name: erpis
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/erp-integration:1.0
    restart: unless-stopped
    volumes:
      - ./services/erp-integration/config:/app/config
      - ./services/erp-integration/files:/app/files
    ports:
      - 9122:9122
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/erp-integration-service-2.1.8.jar --spring.profiles.active=development --spring.config.location=/app/config/application.yml --logging.config=/app/config/logback.xml"
    healthcheck:
      test: 'curl -s -H ''Authorization: Basic RVJQSVM6NkFGNzU5NUEtNzZBNC00MDYwLUFBMUMtQUYyMkZGNjhFMEM1'' ''http://erpis:9122/erpis/actuator/health'' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - erpis
      rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      pms:
        condition: service_healthy

  ################################
  # CARD ISSUANCE API
  ################################
  cardissapi:
    container_name: card-issuance-api
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/card-issuance-api:dev-v1.9
    restart: unless-stopped
    volumes:
      - ./services/card-issuance-api/config:/app/config
    ports:
      - 3011:3012
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: "npm start"
    healthcheck:
      test: 'curl -sS ''http://localhost:3011/health'' | grep -q ''^{"status":"OK"}'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - cardissapi
      rabbitmq:
    depends_on:
      redis:
        condition: service_healthy
      tumsnew:
        condition: service_healthy
      railssso:
        condition: service_healthy
      pms:
        condition: service_healthy
      cardms:
        condition: service_healthy

  ################################
  # CARD ISSUANCE SERVER
  ################################
  cardiss:
    container_name: cardiss
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/card-issuance-server:1.0
    restart: unless-stopped
    # relies on some props files located in /opt/properties
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/card-issuance-server/config:/app/config
    ports:
      - 9140:9140
      - 9141:9141
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/card-issuance-server-2.8.1-SNAPSHOT.jar --spring.profiles.active=development --spring.config.location=/app/config/application.yml"
    healthcheck:
      test: 'curl -sS ''http://cardiss:9141/actuator/health'' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - cardiss
      rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      cori:
        condition: service_healthy
      pms:
        condition: service_healthy
      gator:
        condition: service_healthy
      ams:
        condition: service_healthy
      cardms:
        condition: service_healthy
      erpis:
        condition: service_healthy

  ################################
  # CORE INTERFACE SERVICE
  ################################
  cori:
    container_name: cori
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/core-interface:1.0
    restart: unless-stopped
    volumes:
      - ./services/core-interface/config:/app/config
    ports:
      - 9180:9180
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    command: /bin/sh -c "java -jar /app/core-interface-service-2.0.1.jar --spring.config.location=/app/config/application.yml"
    healthcheck:
      test: 'curl -s -H ''Authorization: Basic Q29yZSBJbnRlcmZhY2U6RTYyOEE5MzUtRTNGNy00REJFLUI4RDctMEU2MTQ3OThCODhC'' ''http://cori:9180/cori/actuator/health'' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - cori
      rabbitmq:
    depends_on:
      pms:
        condition: service_healthy

  ################################
  # RAILS SSO (RUBY)
  ################################
  railssso:
    container_name: railssso
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/rails-sso:dev-v1.10
    restart: unless-stopped
    ### PORT MAPPING
    ports:
      - 3000:3000
    volumes:
      - ./services/rails-sso/config:/app/config
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
      NODE_ENV: production
    healthcheck:
      test: curl -sSo /dev/null http://localhost:3000
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - railssso
      rabbitmq:
      redis:
    depends_on:
      redis:
        condition: service_healthy
      tumsnew:
        condition: service_healthy

  ################################
  # FP TOOLS (RUBY)
  ################################
  fptools:
    container_name: fptools
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/fp-tools:dev-v1.10
    restart: unless-stopped
    ### PORT MAPPING
    ports:
      - 3001:3000
    healthcheck:
      test: curl -sSo /dev/null http://localhost:3000
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - ./services/fp-tools/config:/app/config
    command: /app/bin/rails server -b 0.0.0.0 -e production
    logging:
      <<: *default_logging
    extra_hosts:
      - "mysql:10.8.92.15"
    environment:
      <<: *default_tz
      REDIS_URL: redis://redis:6370
      NODE_ENV: production
    networks:
      inter_app:
        aliases:
          - fptools
      redis:
      mongo:
    depends_on:
      redis:
        condition: service_healthy
      tumsnew:
        condition: service_healthy
      railssso:
        condition: service_healthy
      gator:
        condition: service_healthy
      gatorst:
        condition: service_healthy
      pms:
        condition: service_healthy
      pps:
        condition: service_healthy
      notif:
        condition: service_healthy
      realtime:
        condition: service_healthy
      customerms:
        condition: service_healthy
      cardms:
        condition: service_healthy
      picps:
        condition: service_healthy
      # isscore:
      #   condition: service_healthy
      cardiss:
        condition: service_healthy
      smtp4dev:
        condition: service_healthy
      mongo:
        condition: service_healthy

  ################################
  # OFAC SERVICE
  ################################
  ofac:
    container_name: ofac
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/ofac-server:1.0
    restart: unless-stopped
    volumes:
      - ./services/ofac-server/config:/app/config
    ports:
      - 9112:9112
    command: /bin/sh -c "java -jar /app/ofac-server-0.0.1.jar"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    healthcheck:
      test: 'curl -s http://ofac:9112/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - ofac
    depends_on:
      pms:
        condition: service_healthy

  ################################
  # BROADCASTER - CARD PROCESSING
  ################################
  # don't really know anything about this yet. don't know ports, dependencies, a healthcheck
  broadcaster-cp:
    container_name: broadcaster-cp
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/broadcaster:1.0
    restart: unless-stopped
    ports:
      - 9115:9115
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/broadcaster/config:/app/config
      - ./services/broadcaster/src:/app/src
    # command: /bin/sh -c "java -Dfile.encoding=ISO-8859-1 -jar /app/Broadcaster-1.3.29.jar -Processing"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    networks:
      inter_app:
        aliases:
          - broadcaster-cp

  ################################
  # BROADCASTER - REAL TIME SAF
  ################################
  # don't really know anything about this yet. don't know ports, dependencies, a healthcheck
  broadcaster-rt:
    container_name: broadcaster-rt
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/broadcaster:1.0
    restart: unless-stopped
    ports:
      - 9116:9116
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/broadcaster/config:/app/config
      - ./services/broadcaster/src:/app/src
    command: /bin/sh -c "java -jar /app/Broadcaster-1.3.29.jar -RealTimeSaf"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    networks:
      inter_app:
        aliases:
          - broadcaster-rt

  ################################
  # BROADCASTER - STONE EAGLE SAF
  ################################
  # don't really know anything about this yet. don't know ports, dependencies, a healthcheck
  broadcaster-se:
    container_name: broadcaster-se
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/broadcaster:1.0
    restart: unless-stopped
    ports:
      - 9117:9117
    # TODO: need to figure out which folder is used/prioritized for configs
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/broadcaster/config:/app/config
      - ./services/broadcaster/src:/app/src
    command: /bin/sh -c "java -jar /app/Broadcaster-1.3.29.jar -StoneEagleSaf"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    networks:
      inter_app:
        aliases:
          - broadcaster-se

  ################################
  # REAL TIME INTERCEPTOR (FP RTI) - BANK 1 - PORT 27043
  ################################
  rti-b1:
    container_name: rti-b1
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/rti:1.0
    restart: unless-stopped
    ports:
      - 2743:2743
      - 27043:27043
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/realtime-interceptor/b1-config:/app/config
      - ./services/realtime-interceptor/b1-config/rtinterceptor.props:/app/rtinterceptor.props
    command: /bin/sh -c "java -jar /app/RealTimeInterceptor-3.0.0.jar -c /app/config/rtinterceptor.props"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    # healthcheck:
    #   test: nc -vz localhost 2743
    #   start_period: 45s
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    networks:
      inter_app:
        aliases:
          - rti-b1

  ################################
  # REAL TIME INTERCEPTOR (FP RTI) - BANK 3 - PORT 27033
  ################################
  rti-b3:
    container_name: rti-b3
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/rti:1.0
    restart: unless-stopped
    ports:
      - 2733:2733
      - 27033:27033
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/realtime-interceptor/b3-config:/app/config
      - ./services/realtime-interceptor/b3-config/rtinterceptor.props:/app/rtinterceptor.props
    command: /bin/sh -c "java -jar /app/RealTimeInterceptor-3.0.0.jar -c /app/config/rtinterceptor.props"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    # healthcheck:
    #   test: nc -vz localhost 2733
    #   start_period: 45s
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    networks:
      inter_app:
        aliases:
          - rti-b3

  ################################
  # ISSUANCE CORE (SPRING BOOT)
  ################################
  isscore:
    container_name: isscore
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/issuance-core:1.0
    restart: unless-stopped
    volumes:
      - ./services/issuance-core/config:/app/config
      - ./services/issuance-core/meta:/app/meta
    ports:
      - 8180:8180
    # command: sleep infinity
    command: /bin/sh -c "java -jar ./issuance-core-3.1.1.jar"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    healthcheck:
      test: 'curl -s ''http://isscore:8180/actuator/health'' -H ''Authorization: Basic Q2FyZCBJc3N1YW5jZTowNzg2NWI2ZS0wYjQ1LTExZTMtYjYxOS0wMDE1YzVlZmFmMjU='' | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - isscore
    depends_on:
      cardms:
        condition: service_healthy
      pms:
        condition: service_healthy

  ################################
  # TIMESTAMP HESSIAN SERVICE
  ################################
  timestamp:
    container_name: timestamp
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/timestamp:1.0
    restart: unless-stopped
    volumes:
      - ./services/timestamp/config:/app/config
    ports:
      - 9114:9114
    command: /bin/sh -c "java -jar /app/timestamp-1.0.jar --debug"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    healthcheck:
      test: 'curl -s http://timestamp:9114/tsh/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - timestamp
    depends_on:

      ################################
      # PIC PARTNER SERVICE
      ################################
  picps:
    container_name: picps
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/pic-partner-service:1.0
    restart: unless-stopped
    volumes:
      - ./services/pic-partner-service/config:/app/config
    ports:
      - 9210:9210
    command: /bin/sh -c "java -jar /app/pic-partner-service-2.1.0-SNAPSHOT.jar --spring.config.location=/app/config/application.yml"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    healthcheck:
      test: 'curl -s http://picps:9210/cams/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - picps
      rabbitmq:

        ################################
        # PIC IMAGE REST API
        ################################
  picimage:
    container_name: picimage
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/pic-image-rest-api:1.0
    restart: unless-stopped
    volumes:
      - ./services/pic-image-rest-api/config:/app/config
    ports:
      - 9174:9174
    # command: /bin/sh -c "java -jar /app/ofac-server-0.0.1.jar"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    healthcheck:
      test: 'curl -s http://picimage:9174/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - picimage

  ################################
  # GACH
  ################################
  gach:
    container_name: gach
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/gach:1.0
    # restart: unless-stopped
    volumes:
      - ./services/gach/config/applicationContext.xml:/app/applicationContext.xml
      - ./services/gach/config/base.xml:/app/base.xml
      - ./services/gach/config/dao.xml:/app/dao.xml
      - ./services/gach/config/log4j.xml:/app/log4j.xml
      - ./services/gach/config/manager.xml:/app/manager.xml
      - ./services/gach/config/my.properties:/app/my.properties
      - ./services/gach/config:/app/config
      - ./services/gach/archive:/app/archive
      - ./services/gach/nacha:/app/nacha
      - ./services/gach/scripts:/app/scripts
      - ./services/gach/.ssh:/home/gachSftp/.ssh
    # don't think there will be a healthcheck for GACH as it isn't a long-running server/service
    # healthcheck:
    #   test: curl -ssO /dev/null http://gach:9210
    #   start_period: 45s
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    # ports:
    #   - 9210:9210
    # command: sleep infinity
    # command: /bin/sh -c "/app/scripts/run.sh"
    environment:
      <<: *default_tz
    logging:
      <<: *default_logging
    networks:
      inter_app:
        aliases:
          - gach
      rabbitmq:
    depends_on:
      gatorst:
        condition: service_healthy

  ################################
  # IBS LOAD
  ################################
  ibs:
    container_name: ibs
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/ibs-load:1.0
    # restart: unless-stopped
    volumes:
      - ./etc/properties:/opt/properties
      - ./services/ibs-load/config:/app/config
      - ./services/ibs-load/transxpress:/home/transxpress
      - ./services/ibs-load/archive/FinancialPayments:/opt/cronjobs/ibs/arch/FinancialPayments
      - ./services/ibs-load/archive/AmarilloVernon:/opt/cronjobs/ibs/arch/AmarilloVernon
    # don't think IBS has a rest interface that loads up
    ports:
      - 9220:9220
    # command: sleep infinity
    # command: /bin/sh -c "java -jar /app/ibs-load-3.4.0.jar --spring.config.location=/app/config/application.yml"
    environment:
      <<: *default_tz
    healthcheck:
      # test: ["CMD", "true"]
      test: 'curl -s http://ibs:9220/actuator/health | grep -q ''^{"status":"UP"'''
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    logging:
      <<: *default_logging
    networks:
      inter_app:
        aliases:
          - ibs
      rabbitmq:
    depends_on:
      ams:
        condition: service_healthy

  ################################
  # REJECT PROCESSOR
  ################################
  reject:
    container_name: reject
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/reject-processor:1.0
    # restart: unless-stopped # this doesn't run all the time -- just runs and processes files
    # and then stops. should not auto-restart. a cron starts it up a few times
    # per day
    volumes:
      - ./services/reject-processor/config/application.properties:/app/application.properties
      - ./services/reject-processor/config/log4j.xml:/app/log4j.xml
      - ./services/reject-processor/config/applicationContext.xml:/app/config/applicationContext.xml
      - ./services/reject-processor/config/spring-base.xml:/app/config/spring-base.xml
      - ./services/reject-processor/ach-files:/app/ach-files
    # command: sleep infinity
    # command: /bin/sh -c "java -jar /app/RejectProcessor-1.0.10.jar"
    logging:
      <<: *default_logging
    environment:
      <<: *default_tz
    networks:
      inter_app:
        aliases:
          - reject
      rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      emailhandler:
        condition: service_healthy

  ################################
  # Card Production Web
  ################################
  card-production-web:
    container_name: card-production-web
    image: 063584108314.dkr.ecr.us-east-2.amazonaws.com/card-production-web:dev-v1.0
    restart: unless-stopped
    volumes:
      - ./services/card-production-web/config:/app/config
    ports:
      - 3010:3000
    logging:
      <<: *default_logging
    command: /app/bin/rails server -b 0.0.0.0 -e production
    environment:
      <<: *default_tz
    healthcheck:
      test: curl -sSo /dev/null http://localhost:3000
      start_period: 45s
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      inter_app:
        aliases:
          - card-production-web
      redis:
        aliases:
          - redis
    depends_on:
      pps:
        condition: service_healthy
      pms:
        condition: service_healthy
      customerms:
        condition: service_healthy
      gator:
        condition: service_healthy
      redis:
        condition: service_healthy
      tumsnew:
        condition: service_healthy

networks:
  # the inter-app network is used for the inter-app communication by all other services/apps
  inter_app:
    driver: bridge
    name: inter_app

  rabbitmq:
    driver: bridge
    name: rabbitmq

  redis:
    driver: bridge
    name: redis

  mongo:
    driver: bridge
    name: mongo

  replication:
    driver: bridge
    name: replication

volumes:
  rabbitdata:
    name: rabbitdata
    external: true

  mongo-data:
    name: mongo-data
